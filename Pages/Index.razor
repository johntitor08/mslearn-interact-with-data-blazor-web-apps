@page "/"
@using BlazingPizza.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using BlazingPizza.Services
@inject OrderState OrderState

<div class="top-bar">
    <div class="logo">
        <img src="img/logo.png" alt="Blazing Pizza Logo" />
    </div>
    <div class="user-info">
        <img src="img/user.png" alt="User" />
        <span class="username">John Doe</span>
        <button class="btn btn-link sign-out" @onclick="SignOut">Sign Out</button>
    </div>
</div>

<div class="content">
    <!-- Main content -->
    <div class="main">
        <h1>Blazing Pizza Specials</h1>
        <ul class="pizza-cards">
            @if (specials != null && specials.Count > 0)
            {
                @foreach (var special in specials)
                {
                    <li style="background-image: url('@special.ImageUrl')">
                        <div class="pizza-info">
                            <span class="title">@special.Name</span>
                            <span>@special.Description</span>
                            <span class="price">@special.GetFormattedBasePrice()</span>
                            <button class="btn btn-primary btn-sm mt-2" 
                                    @onclick="() => OrderState.ShowConfigurePizzaDialog(special)">
                                Add to Order
                            </button>
                        </div>
                    </li>
                }
            }
            else
            {
                <li>Loading specials...</li>
            }
        </ul>

        <hr />

        <h1>Today's Pizzas</h1>
        @if (todaysPizzas == null || todaysPizzas.Length == 0)
        {
            <p>We're finding out what pizzas are available today...</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Pizza Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pizza in todaysPizzas)
                    {
                        <tr>
                            <td>@pizza.Special.Name</td>
                            <td>@pizza.Special.Description</td>
                            <td>@pizza.GetFormattedTotalPrice()</td>
                            <td>
                                <button class="btn btn-primary btn-sm"
                                        @onclick="() => OrderState.ShowConfigurePizzaDialog(pizza.Special)">
                                    Add
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <!-- Sidebar -->
    <div class="sidebar">
        @if (OrderState.Order.Pizzas.Any())
        {
            <div class="order-contents">
                <h2>Your order</h2>

                @foreach (var configuredPizza in OrderState.Order.Pizzas)
                {
                    <div class="cart-item">
                        <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                        <div class="item-price">
                            @configuredPizza.GetFormattedTotalPrice()
                        </div>
                        <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-cart">Choose a pizza<br>to get started</div>
        }

        <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
            Total:
            <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
            <a href="checkout"
               class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
                Order >
            </a>
        </div>
    </div>
</div>

<!-- Configure Pizza Dialog -->
@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code {
    private List<PizzaSpecial> specials = new();
    private Pizza[] todaysPizzas;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
        }
        catch
        {
            specials = new List<PizzaSpecial>
            {
                new PizzaSpecial { Name = "The Baconatorizor", BasePrice =  11.99M, Description = "It has EVERY kind of bacon", ImageUrl="img/pizzas/bacon.jpg"},
                new PizzaSpecial { Name = "Buffalo chicken", BasePrice =  12.75M, Description = "Spicy chicken, hot sauce, and blue cheese", ImageUrl="img/pizzas/meaty.jpg"},
                new PizzaSpecial { Name = "Veggie Delight", BasePrice =  11.5M, Description = "It's like salad, but on a pizza", ImageUrl="img/pizzas/salad.jpg"},
                new PizzaSpecial { Name = "Margherita", BasePrice =  9.99M, Description = "Traditional Italian pizza with tomatoes and basil", ImageUrl="img/pizzas/margherita.jpg"},
                new PizzaSpecial { Name = "Basic Cheese Pizza", BasePrice =  11.99M, Description = "Cheesy and delicious", ImageUrl="img/pizzas/cheese.jpg"},
                new PizzaSpecial { Name = "Classic pepperoni", BasePrice =  10.5M, Description = "Classic pepperoni pizza", ImageUrl="img/pizzas/pepperoni.jpg"}
            };
        }

        if (specials.Count > 0)
        {
            todaysPizzas = new Pizza[]
            {
                new Pizza { Special = specials[0], Size = 12 },
                new Pizza { Special = specials[1], Size = 14 },
                new Pizza { Special = specials[2], Size = 16 }
            };
        }
    }

    private void SignOut()
    {
        Console.WriteLine("User signed out");
    }
}
