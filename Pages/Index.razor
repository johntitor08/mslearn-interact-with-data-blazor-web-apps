@page "/"
@using BlazingPizza.Model
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="top-bar">
    <div class="logo">
        <img src="img/logo.png" alt="Blazing Pizza Logo" />
    </div>
    <div class="user-info">
        <img src="img/user.png" alt="User" />
        <span class="username">John Doe</span>
        <button class="btn btn-link sign-out" @onclick="SignOut">Sign Out</button>
    </div>
</div>

<div class="content">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="order-contents">
            <h2>Your Order</h2>
            @if (order.Count == 0)
            {
                <p>No pizzas added yet.</p>
            }
            else
            {
                <ul class="order-details">
                    @foreach (var pizza in order)
                    {
                        <li>
                            @pizza.Special.Name (@pizza.Size") 
                            <button class="btn btn-link btn-sm" @onclick="() => RemoveFromOrder(pizza)">❌</button>
                        </li>
                    }
                </ul>
                <p><strong>Total: @GetOrderTotal()</strong></p>
            }
        </div>
    </div>

    <!-- Main content -->
    <div class="main">
        <h1>Blazing Pizza Specials</h1>
        <ul class="pizza-cards">
            @if (specials != null && specials.Count > 0)
            {
                @foreach (var special in specials)
                {
                    <li style="background-image: url('@special.ImageUrl')">
                        <div class="pizza-info">
                            <span class="title">@special.Name</span>
                            <span>@special.Description</span>
                            <span class="price">@special.GetFormattedBasePrice()</span>
                            <button class="btn btn-primary btn-sm mt-2" @onclick="() => AddToOrder(special)">Add to Order</button>
                        </div>
                    </li>
                }
            }
            else
            {
                <li>Loading specials...</li>
            }
        </ul>

        <hr />

        <h1>Today's Pizzas</h1>
        @if (todaysPizzas == null || todaysPizzas.Length == 0)
        {
            <p>We're finding out what pizzas are available today...</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Pizza Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pizza in todaysPizzas)
                    {
                        <tr>
                            <td>@pizza.Special.Name</td>
                            <td>@pizza.Special.Description</td>
                            <td>@pizza.GetFormattedTotalPrice()</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => AddToOrder(pizza.Special, pizza.Size)">Add</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<PizzaSpecial> specials = new();
    private Pizza[] todaysPizzas;
    private List<Pizza> order = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
        }
        catch
        {
            specials = new List<PizzaSpecial>
            {
                new PizzaSpecial { Name = "The Baconatorizor", BasePrice =  11.99M, Description = "It has EVERY kind of bacon", ImageUrl="img/pizzas/bacon.jpg"},
                new PizzaSpecial { Name = "Buffalo chicken", BasePrice =  12.75M, Description = "Spicy chicken, hot sauce, and blue cheese", ImageUrl="img/pizzas/meaty.jpg"},
                new PizzaSpecial { Name = "Veggie Delight", BasePrice =  11.5M, Description = "It's like salad, but on a pizza", ImageUrl="img/pizzas/salad.jpg"},
                new PizzaSpecial { Name = "Margherita", BasePrice =  9.99M, Description = "Traditional Italian pizza with tomatoes and basil", ImageUrl="img/pizzas/margherita.jpg"},
                new PizzaSpecial { Name = "Basic Cheese Pizza", BasePrice =  11.99M, Description = "Cheesy and delicious", ImageUrl="img/pizzas/cheese.jpg"},
                new PizzaSpecial { Name = "Classic pepperoni", BasePrice =  10.5M, Description = "Classic pepperoni pizza", ImageUrl="img/pizzas/pepperoni.jpg"}
            };
        }

        if (specials.Count > 0)
        {
            todaysPizzas = new Pizza[]
            {
                new Pizza { Special = specials[0], Size = 12 },
                new Pizza { Special = specials[1], Size = 14 },
                new Pizza { Special = specials[2], Size = 16 }
            };
        }
    }

    private void AddToOrder(PizzaSpecial special, int size = 12)
    {
        order.Add(new Pizza { Special = special, Size = size });
    }

    private void RemoveFromOrder(Pizza pizza)
    {
        order.Remove(pizza);
    }

    private string GetOrderTotal()
    {
        decimal total = order.Sum(p => p.GetTotalPrice());
        return $"£{total:F2}";
    }

    private void SignOut()
    {
        Console.WriteLine("User signed out");
    }
}
